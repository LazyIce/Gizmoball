package physics;/**************************************************************************** * Copyright (C) 1999 by the Massachusetts Institute of Technology, *                           Cambridge, Massachusetts. * ***************************************************************************/import java.io.Serializable;public final class Angle  implements Serializable, Comparable{  private final double cosine;  private final double sine;  private static double EPSILON = 0.000001;  /** 之后计算45度的倍数角度时需要多次用到 */  private static final double SQRT = Math.sqrt(0.5);  /** 下面角度的计算都是放在单位圆中计算对应的cos和sin值再用向量的坐标形式表示*/  /** 0度角 */  public static final Angle ZERO = new Angle(1.0, 0.0);  /** 45度角*/  public static final Angle DEG_45 = new Angle(SQRT, SQRT);  /** 90度角 */  public static final Angle DEG_90 = new Angle(0.0, 1.0);  /** 135度角 */  public static final Angle DEG_135 = new Angle(-SQRT, SQRT);  /** 180度角 */  public static final Angle DEG_180 = new Angle(-1.0, 0.0);  /** 225度角 */  public static final Angle DEG_225 = new Angle(-SQRT, -SQRT);  /** 270度角 */  public static final Angle DEG_270 = new Angle(0.0, -1.0);  /** 315度角 */  public static final Angle DEG_315 = new Angle(SQRT, -SQRT);  /** pi/4弧度角 */  public static final Angle RAD_PI_OVER_FOUR = DEG_45;  /** pi/2弧度角*/  public static final Angle RAD_PI_OVER_TWO = DEG_90;  /** pi弧度角 */  public static final Angle RAD_PI = DEG_180;  // CONSTRUCTORS:  /** 弧度角转换成角度 */  public Angle(double radians) {    cosine = Math.cos(radians);    sine = Math.sin(radians);  }      /** 把向量坐标转换成角度 */  public Angle(double x, double y) {    double r = Math.sqrt((x * x) + (y * y));    if (r == 0.0) {      if ((x == 0.0) && (y == 0.0)) {	throw new IllegalArgumentException("Requires violated: Triangle is singular");      } else {	throw new ArithmeticException("Triangle is singular; imprecision on <" + x + "," + y + ">");      }    }    cosine = x / r;    sine = y / r;  }  // OBSERVERS:  /** 返回con值 */  public double cos() {    return cosine;  }  /** 返回sin值 */  public double sin() {    return sine;  }  /** 返回tan值 */  public double tan() {    return sine/cosine;  }  /** 返回角度的弧度制 */  public double radians() {    double d = Math.atan2(sine, cosine);    if (d > Math.PI || d < -Math.PI) {      System.out.println("d = " + d);      throw new IllegalArgumentException();    }    return d;  }  /**   * Compares this object with the specified object for order.   * @return a negative integer, zero, or a positive integer as this   * object is less than, equal to, or greater than the specified object.   * @exception ClassCastException if <code>o</code> is not an Angle   * @exception NullPointerException if <code>o</code> is null   */  public int compareTo(Object o)  {    // Comparable.compareTo allows us to throw a ClassCastException    return compareTo((Angle) o);  }    /**   * Compares this object with the specified object for order.   * @return a negative integer, zero, or a positive integer as this   * object is less than, equal to, or greater than the specified object.   * @exception NullPointerException if <code>c</code> is null   */  public int compareTo(Angle c)  {    if (this.equals(c))      return 0;    if (sine >= 0.0) {      if (c.sine < 0.0) {	return -1;      } else {	if (cosine < c.cosine) {	  return 1;	} else {	  return -1;	}      }    } else {      if (c.sine >= 0.0) {	return 1;      } else {	if (cosine < c.cosine) {	  return -1;	} else {	  return 1;	}      }    }  }    public static void setEpsilon(double eps)    {	EPSILON = eps;    }	  // PRODUCERS:  /** 计算两角和 */  public Angle plus(Angle a) {    //使用了三角函数两角和公式    double cosine = (this.cosine * a.cosine) - (this.sine * a.sine);    double sine = (this.sine * a.cosine) + (this.cosine * a.sine);    return new Angle(cosine, sine);  }  /** 计算两角差 */  public Angle minus(Angle a) {    //使用了三角函数两角差公式    double cosine = (this.cosine * a.cosine) + (this.sine * a.sine);    double sine = (this.sine * a.cosine) - (this.cosine * a.sine);    return new Angle(cosine, sine);  }  public String toString() {    return "Angle(" + cosine + "," + sine + ")";  }/** 判断两个角度是否相等 */  public boolean equals(Angle a) {    if (a == null) return false;    double cosDiff, sinDiff;    cosDiff = this.cosine - a.cosine;    sinDiff = this.sine - a.sine;    return ((Math.abs(sinDiff)<=EPSILON) && (Math.abs(cosDiff)<=EPSILON));  }  public boolean equals(Object o) {    return (o instanceof Angle) && equals((Angle) o);  }  public int hashCode() {    return (new Double(sine)).hashCode() + (new Double(cosine)).hashCode();  }}